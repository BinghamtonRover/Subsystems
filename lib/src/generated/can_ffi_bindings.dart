// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/can.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml -v severe`.
///
class CanBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CanBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CanBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<BurtCan> can_init() {
    return _can_init();
  }

  late final _can_initPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BurtCan> Function()>>('can_init');
  late final _can_init =
      _can_initPtr.asFunction<ffi.Pointer<BurtCan> Function()>();

  void can_free(
    ffi.Pointer<BurtCan> message,
  ) {
    return _can_free(
      message,
    );
  }

  late final _can_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BurtCan>)>>(
          'can_free');
  late final _can_free =
      _can_freePtr.asFunction<void Function(ffi.Pointer<BurtCan>)>();

  void can_send(
    ffi.Pointer<BurtCan> can,
    ffi.Pointer<NativeCanMessage> message,
  ) {
    return _can_send(
      can,
      message,
    );
  }

  late final _can_sendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<BurtCan>,
              ffi.Pointer<NativeCanMessage>)>>('can_send');
  late final _can_send = _can_sendPtr.asFunction<
      void Function(ffi.Pointer<BurtCan>, ffi.Pointer<NativeCanMessage>)>();

  ffi.Pointer<NativeCanMessage> can_read(
    ffi.Pointer<BurtCan> can,
  ) {
    return _can_read(
      can,
    );
  }

  late final _can_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NativeCanMessage> Function(
              ffi.Pointer<BurtCan>)>>('can_read');
  late final _can_read = _can_readPtr.asFunction<
      ffi.Pointer<NativeCanMessage> Function(ffi.Pointer<BurtCan>)>();

  void can_message_free(
    ffi.Pointer<NativeCanMessage> message,
  ) {
    return _can_message_free(
      message,
    );
  }

  late final _can_message_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NativeCanMessage>)>>(
      'can_message_free');
  late final _can_message_free = _can_message_freePtr
      .asFunction<void Function(ffi.Pointer<NativeCanMessage>)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final CanBindings _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BurtCan>)>>
      get can_free => _library._can_freePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NativeCanMessage>)>>
      get can_message_free => _library._can_message_freePtr;
}

final class BurtCan extends ffi.Opaque {}

final class NativeCanMessage extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> buffer;

  @ffi.Uint16()
  external int id;

  @ffi.Int()
  external int length;
}
